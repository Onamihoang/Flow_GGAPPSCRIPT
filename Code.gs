// Config Sheet ID - thay th·∫ø b·∫±ng ID c·ªßa Google Sheet b·∫°n v·ª´a t·∫°o
const CONFIG_SHEET_ID = '1_AHnosp3iZB21fgvqGAH0nSjKjbaf3Wp1iqt4bcog_A';

// Th√™m h√†m doGet ƒë·ªÉ x·ª≠ l√Ω GET requests
function doGet() {
  return ContentService.createTextOutput('App is running');
}

function doPost(e) {
  try {
    const data = JSON.parse(e.postData.contents);
    
    // Add logging
    Logger.log('Received webhook data:', data);
    
    // L·∫•y th√¥ng tin repo
    const repoName = data.repository.name;
    Logger.log('Repository name:', repoName);
    
    // L·∫•y c·∫•u h√¨nh t·ª´ sheet
    const configSheet = SpreadsheetApp.openById(CONFIG_SHEET_ID);
    const configs = configSheet.getSheetByName('Configurations');
    const repoConfig = getRepoConfig(configs, repoName);
    Logger.log('Repo config:', repoConfig);
    
    if (!repoConfig) {
      Logger.log('No configuration found for repository:', repoName);
      return ContentService.createTextOutput(
        `No configuration found for repository: ${repoName}`
      );
    }
    
    // C·∫≠p nh·∫≠t document
    const doc = DocumentApp.openById(repoConfig.docId);
    const body = doc.getBody();
    
    // Th√™m th√¥ng tin commit
    body.appendParagraph('üîÑ New Commit Details:')
        .setHeading(DocumentApp.ParagraphHeading.HEADING2);
    
    body.appendParagraph(`üì¶ Repository: ${repoName}`);
    body.appendParagraph(`üë§ Author: ${data.pusher.name}`);
    body.appendParagraph(`üí¨ Message: ${data.head_commit.message}`);
    body.appendParagraph(`‚è∞ Time: ${new Date().toLocaleString()}`);
    body.appendParagraph('-------------------');
    
    // L∆∞u thay ƒë·ªïi
    doc.saveAndClose();
    
    return ContentService.createTextOutput('Success');
  } catch (error) {
    Logger.log('Error:', error);
    return ContentService.createTextOutput(`Error: ${error.toString()}`);
  }
}

function getRepoConfig(sheet, repoName) {
  const data = sheet.getDataRange().getValues();
  // B·ªè qua h√†ng header
  for (let i = 1; i < data.length; i++) {
    if (data[i][0] === repoName) {
      return {
        repoName: data[i][0],
        docId: data[i][1],
        owner: data[i][2]
      };
    }
  }
  return null;
}

// H√†m helper ƒë·ªÉ setup repo m·ªõi
function setupNewRepo(repoName, docId, owner) {
  const configSheet = SpreadsheetApp.openById(CONFIG_SHEET_ID);
  const configs = configSheet.getSheetByName('Configurations');
  
  configs.appendRow([repoName, docId, owner]);
  
  // Kh·ªüi t·∫°o document
  const doc = DocumentApp.openById(docId);
  const body = doc.getBody();
  
  body.appendParagraph('üöÄ Git Commit History')
      .setHeading(DocumentApp.ParagraphHeading.HEADING1);
  body.appendParagraph(`Repository: ${repoName}`)
      .setHeading(DocumentApp.ParagraphHeading.HEADING2);
  body.appendParagraph('-------------------');
}

// H√†m ƒë·ªÉ setup d·ªØ li·ªáu ban ƒë·∫ßu
function setupInitialData() {
  const configSheet = SpreadsheetApp.openById(CONFIG_SHEET_ID);
  const configs = configSheet.getSheetByName('Configurations');
  
  // X√≥a d·ªØ li·ªáu c≈©
  configs.clear();
  
  // Th√™m headers
  configs.getRange('A1:C1').setValues([['Repository Name', 'Google Doc ID', 'Owner']]);
  
  // Th√™m d·ªØ li·ªáu cho repo
  setupNewRepo(
    'test-git-doc',     // T√™n repository c·ªßa b·∫°n
    'YOUR_DOC_ID_HERE', // ID c·ªßa Google Doc b·∫°n v·ª´a t·∫°o
    'your-username'     // GitHub username c·ªßa b·∫°n
  );
}
